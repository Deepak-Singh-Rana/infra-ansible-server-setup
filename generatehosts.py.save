#!/usr/bin/python3
#---------------what does this script do?----------------
#cleans up tmp folder, opens csv, generate hosts file, generate yaml files, open yaml files
#--------------------------------------------------------
import yaml,csv
#pip3 install --user pyyaml pwgen
import random
import string
import os
import subprocess
import glob
#from ansible_vault import Vault
from pwgen import pwgen
import argparse
import onepasswordconnectsdk
import socket
import ipaddress

ansible_vault_pass = ""
hosts_list = ""
#redhat_found = ""
#redhat_hostnames = ""

fixeddev = ""
fixedtest = ""

##---parse command line arguments---#
parser = argparse.ArgumentParser(description='Tell the script what csv to load')
#parser.add_argument('--csv', default='vm_list.csv', help='name of file to read (default: vm_list.csv)')
parser.add_argument('-c', default='vm_list.csv', help='name of file to read (default: vm_list.csv)')
parser.add_argument('-a', help='run from bash script')
csvargument=parser.parse_args()
csvtoread=csvargument.c
bashfile=csvargument.a
#make sure people run this script through the generatehosts bash script
if (bashfile != "generatehosts"):
	print("Do not run generatehosts.py this file from the command line manually")
	print("Please use 'generatehosts' instead. this will help you log into lastpass and also select a csv file to read from")
	print("./generatehosts")
	exit()

##--sign into onepassword--##
command1 = ["op", "signin", "--raw"]
session_token = subprocess.check_output(command1).strip()
print(f"session_token: {session_token}")

two_factor = subprocess.check_output(["op", "user", "get", "t3inz.1password.com", "--session", session_token]).strip()
print(two_factor)

print("hi")
##----generate random strings on request----##
def get_random_alphanumeric_string(length):
	letters_and_digits = string.ascii_letters + string.digits
	result_str = ''.join((random.choice(letters_and_digits) for i in range(length)))
	#print("Random alphanumeric String is:", result_str)
	return result_str

##----generate a random password and return it----##
def generate_password(characters):
	password = pwgen(characters, no_ambiguous=True)
	return password


##----get any files that we need from 1password----##
def get_file_from_1password(filename):
#	filename="ansible-deploy.key"
	print(filename)
	try:
		f = open("tmp/"+filename)
		print(f)
		f.close()
	except FileNotFoundError:
		print(filename+" not found, downloading from 1password")
#		op document get $filename --output=tmp/$filename"
#                f = open("tmp/"+filename, "w")
		subprocess.run(["op", "document", "get", filename, "--output=tmp/"+filename])
		os.chmod("tmp/"+filename, 0o400)
#        finally:

##----get any files that we need from lastpass----##
def get_file_from_lastpass(filename):
	print(filename)
	try:
		f = open("tmp/"+filename)
#		print(f)
	except FileNotFoundError:
		print(filename+" not found, downloading from lastpass")
		f = open("tmp/"+filename, "w")
		p2 = subprocess.Popen(["lpass", "show", "--notes", "Shared-infra-ansible-server-setup/"+filename], stdout=f)
		os.chmod("tmp/"+filename, 0o400)
	finally:
		f.close()

##----write a lastpass file----##
def write_password_file(user,userpass,fqdn):
        #generate lastpass file
        print("Generating lastpass file for "+user+" on "+fqdn)
        deets = "Hostname: "+fqdn+"\n"
        deets += "NoteType: Server\n"
        deets += "Username: "+user+"\n"
        deets += "Password: "+userpass+"\n"
#        print(deets)
        pass_jsonfile = "tmp/"+fqdn+"_"+user+".json"
        vm_passwd_file = open(pass_jsonfile, 'w')
        vm_passwd_file.write(deets)
        vm_passwd_file.close()

##----upload file to lastpass----##
def upload_to_lastpass(user,fqdn):
	#upload the password file
	print("Uploading lastpass file for "+user+" on "+fqdn)
	pass_jsonfile = "tmp/"+fqdn+"_"+user+".json"
	p1 = subprocess.Popen(["cat", pass_jsonfile], stdout=subprocess.PIPE)
	p2 = subprocess.Popen(["lpass", "edit", "--notes", "--non-interactive", "Shared-Techm/auto-bgs/[bg]"+fqdn+""+user+""], stdin=p1.stdout, stdout=subprocess.PIPE)
	p1.stdout.close()
	p2.communicate()[0]
	subprocess.run(["lpass", "sync"])
	os.remove(pass_jsonfile)

##----generate the correct guestid for vmware----##
def set_guest_id(template):
	if template == "rhel9-template":
		guestid = "vm_guest_id: rhel8_64Guest\n"
	if template == "rhel8-template":
		guestid = "vm_guest_id: rhel8_64Guest\n"
	if template == "rhel7-template":
		guestid = "vm_guest_id: rhel7_64Guest\n"
	if template == "suse15-template":
		guestid = "vm_guest_id: sles15_64Guest\n"
	if "ubuntu" in template:
		guestid = "vm_guest_id: ubuntu64Guest\n"
#	print(guestid)
	return guestid

##----autofill config for a app-dev dev/testing server----##
def config_devserver(type,vlan):
#	print(type)
	config=""
	config += "primary_securitygroup: sec_ipa.app-development.access\n"
	config += "vcenter_vlan: "+vlan+"\n"
	config += "vcenter_fqdn: snzclham860.nzc.co.nz\n"
	config += "vcenter_datacenter: HamiltonVI\n"
	config += "vcenter_datastore: HSVMVMWNFSHAM_FIX_APPDEV01\n"
	config += "vcenter_cluster: HM-FIX-01\n"
	config += "vcenter_folder: app-development_team\n"
	return config

print("hello there")

##----mk dirs exist if they don't already----#
if not os.path.isdir("tmp"):
	os.makedirs("tmp")



##----cleanup before our run to make sure we don't have things that we don't want----#
a=0
print("--Cleaning up tmp--")
for file in os.listdir("tmp"):
#	print(file)
	if file.endswith(".yml"):
		file_relpath="tmp/"+file
#		print(file+" is a yml file")
		print("removing old file :"+file_relpath)
		os.remove(file_relpath)
	if file.endswith(".json"):
		file_relpath="tmp/"+file
#		print(file+" is a json file")
		print("removing old file :"+file_relpath)
		os.remove(file_relpath)
#	if os.path.isfile("tmp/ansible-vault-file"):
	if "ssh_host_ed25519_key" in file:
		file_relpath="tmp/"+file
#		print(file+" is a ssh host key file")
		print("removing old file :"+file_relpath)
		os.remove(file_relpath)
if os.path.isdir("/tmp/radius"):
	for file in os.listdir("tmp/radius"):
		print("removing old file :"+file)
		os.remove("tmp/radius/"+file)

##call the get_file_from_lastpass function to make sure we have needed files
print("")
print("--Getting required files from onepassword--")
get_file_from_1password("ansible-vault-file")
get_file_from_1password("ansible-deploy.key")
get_file_from_1password("ansible-deploy.key.pub")
get_file_from_1password("server_ca")
get_file_from_1password("server_ca.pub")

##read in the vault password
with open("tmp/ansible-vault-file") as f:
	ansible_vault_pass = f.read().rstrip("\n")

##read in the csv
csvfile = open(csvtoread, 'r')
datareader = csv.DictReader(filter(lambda row: row[0]!='#', csvfile), delimiter=",", quotechar='"')
data_headings = []

#open a hosts file for writing hosts to
print("")
print("--Building hosts file/s--")
hosts_file = open("inventory/autogen-newservers", 'w')
#this will hold information for us to build an ansible inventory file
hosts_text = ""

hosts_text += "[newservers]\n"

# Loop through each row of the csv
for row_index, row in enumerate(datareader):
	# Empty string that we will fill with YAML formatted text based on data extracted from our CSV.
	yaml_text = ""
	lp_text = ""
	lpr_text = ""
	lpz_text = ""
	zeus_data = ""
	root_data = ""
	dnscheck = ""
	restarttime = ""
	fqdn = row['vm_shortname'].lower()+".2dl.nz"
	ymlfilepath = "tmp/"+row['vm_ipv4_address']+".yml"
	print("")
	print("building \""+row['vm_shortname']+"\" writing as file \""+row['vm_ipv4_address']+".yml\"")
#	print("building file \""+row['vm_ipv4_address']+".yml\" for server \""+row['vm_shortname']+"\"")
	vm_yaml_file = open("tmp/"+row['vm_ipv4_address']+".yml", 'w')
	# add the shortname to the lastpass text
	#grab the shortname for lastpass files
	shortname = row['vm_shortname']
	#make sure they don't put silly thing in the vm_shortname column
	if "." in shortname:
		print("the server hostname(vm_shortname) cannot contain a fullstop")
		exit()
	lp_text += "Hostname: " + row['vm_shortname'].lower() +"\n"
	ipv4 = row['vm_ipv4_address']
	ipaddress.ip_address(ipv4)
	#us ip instead of fqdn, so we don't need dns already existing as IPA will create it itself
	hosts_text += row['vm_ipv4_address'] + "\n"
	hosts_list += fqdn + "\n"
	yaml_text += "vm_shortname: " + row['vm_shortname'].lower() +'\n'
	yaml_text += "vcenter_template: " + row['vcenter_template'] +'\n'
	#if a dev server autofill things for them
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
	if "HM-FIX-1018" in row['vcenter_vlan']:
#	if "HM-FIX-10180" in row['vcenter_vlan']:
		yaml_text += config_devserver("dev","HM-FIX-1018")
#		print(yaml_text)
	elif "HM-FIX-1019" in row['vcenter_vlan']:
		yaml_text += config_devserver("test","HM-FIX-1019")
#		print(yaml_text)
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
#NOTE DEVS WON'T HAVE ACCESS TO LASTPASS, BUT DO WE NEED TO PUT THE ROOT/ZEUS THERE, THEY ARE DEVLOPMENT SERVERS
	#if not a dev server, grab the details from the csv
	else:
		yaml_text += "primary_securitygroup: " + row['primary_securitygroup'].lower() + '\n'
		yaml_text += "vcenter_vlan: " + row['vcenter_vlan'] +'\n'
		if "HamiltonVI" in row['vcenter_datacenter']:
			yaml_text += "vcenter_fqdn: snzclham860.nzc.co.nz\n"
		elif "KhyberPassVI" in row['vcenter_datacenter']:
			yaml_text += "vcenter_fqdn: snzclakl660.nzc.co.nz\n"
		elif "HamiltonNFV" in row['vcenter_datacenter']:
			yaml_text += "vcenter_fqdn: snzclham880.nzc.co.nz\n"
		elif "KhyberPassNFV" in row['vcenter_datacenter']:
			yaml_text += "vcenter_fqdn: snzclakl680.nzc.co.nz\n"
		else:
			print("")
			print("")
			print("===============================")
			print("⚠️Warning! something is incorrect with the Vcenter Datacentre you have chosen, please double check the Datacentre name and try again")
			print("for the vm: "+row['vm_shortname'])
			print("The problem word: "+row['vcenter_datacenter'])
			print("===============================")
			exit()
		yaml_text += "vcenter_datacenter: " + row['vcenter_datacenter'] +'\n'
		yaml_text += "vcenter_datastore: " + row['vcenter_datastore'] +'\n'
		yaml_text += "vcenter_cluster: " + row['vcenter_cluster'] +'\n'
		yaml_text += "vcenter_folder: " + row['vcenter_folder'] +'\n'

	yaml_text += "vm_ipv4_address: " + row['vm_ipv4_address'] +'\n'
	yaml_text += "vm_ipv4_netmask: " + row['vm_ipv4_netmask'] +'\n'
	yaml_text += "vm_ipv4_gateway: " + row['vm_ipv4_gateway'] +'\n'
#	print("setting dns to ipa servers ips")
	yaml_text += "vm_ipv4_dns_a: " + '172.21.238.3\n'
	yaml_text += "vm_ipv4_dns_b: " + '172.23.238.3\n'
#	print(row['vcenter_template'])

	yaml_text += set_guest_id(row['vcenter_template'].lower())

	if row['ipv6'].lower() == "true" or row['ipv6'].lower() == "yes":
		print("ipv6 found")
		#generate radius compatible ipv6 name
		yaml_text += "vm_ipv6_address_underscores: "+row["vm_ipv6_address"].replace(':','_') +'\n'
		#print everything else
		yaml_text += "ipv6: true\n"
		yaml_text += "vm_ipv6_address: "+row["vm_ipv6_address"] +'\n'
		yaml_text += "vm_ipv6_netmask: "+row["vm_ipv6_netmask"] +'\n'
		yaml_text += "vm_ipv6_gateway: "+row["vm_ipv6_gateway"] +'\n'
		yaml_text += "vm_ipv6_dns_a: "+row["vm_ipv6_dns_a"] +'\n'
		yaml_text += "vm_ipv6_dns_b: "+row["vm_ipv6_dns_b"] +'\n'
	else:
		print("note* ipv6 not found")
		yaml_text += "ipv6: false\n"
	yaml_text += "description: " + row['description'] +'\n'

	#check to see if someone put in a restart time
	if row['vm_autoreboot_time'].lower():
		validrestarttime = ""
		restarttime = row['vm_autoreboot_time'].lower()
		print(restarttime)

		#validate the restart time
		validrestarttime=subprocess.run(["systemd-analyze", "calendar", restarttime], stderr=subprocess.PIPE, stdout=subprocess.PIPE)
		decodederror=validrestarttime.stderr.decode()
		decodedout=validrestarttime.stdout.decode()
#		print(decodederr)
#		print(decodedout)
		#if format is not valid
		if "Invalid argument" in decodederror:
			print("Failure: Restart Time...")
			print("-----------")
			print(restarttime)
			print("-----------")
			print("Is not valid")
			print("For more informaiton on restart times see https://wiki.archlinux.org/title/Systemd/Timers")
			exit()
		#format is valid
		else:
			yaml_text += "vm_autoreboot_time: "+row['vm_autoreboot_time'].lower() +'\n'
			print("note* server automatic restart time found and will be applied to the server you build")
	#no restart timer found
	else:
		print("⚠️WARNING! you have not added an autoreboot time")
		print("opt-out of autoreboots? note, you will have to manualy reboot servers once per month: ")
		val = input("type 'yes' to opt out: ")
		if (val != "yes" ):
			print("quitting, please fix the autoreboot time in the csv and rerun this script")
			exit()
		#yaml_text += "vm_autoreboot_time: \n"

	# generate a random password for root
	root_passwd = generate_password(16)
	yaml_text += "vm_root_password: "+root_passwd+"\n"

	# generate a random password for zeus
	zeus_passwd = generate_password(16)
	yaml_text += "vm_zeus_password: "+zeus_passwd+"\n"

#unhash for debugging
#	print(yaml_text)

	# Write our YAML string to the new text file and close it.
	vm_yaml_file.write(yaml_text)
	vm_yaml_file.close()

	#generate breakglass files
	write_password_file("root",root_passwd,fqdn)
	write_password_file("zeus",zeus_passwd,fqdn)
	#upload breakglass files to lastpass
	upload_to_lastpass("root",fqdn)
	upload_to_lastpass("zeus",fqdn)


#generate the variables for the hosts
print("")
print("--Generating vars for the hosts file for ansible--")
hosts_text += "\n"
hosts_text += "[newservers:vars]\n"
hosts_text += "ansible_ssh_private_key_file='./tmp/ansible-deploy.key'\n"
hosts_text += "ansible_ssh_extra_args='-o StrictHostKeyChecking=no'\n"

#write our hosts string to the hosts_file and close it
hosts_file.write(hosts_text)
hosts_file.close()
# We're done! Close the CSV file.
csvfile.close()
#exit()
print("")
print("--Encrypting any files that need encrypting--")
for file in os.listdir("tmp"):
        if file.endswith(".yml"):
                ymlfilepath="tmp/"+file
                #encrypt the file
                print("encrypting :"+ymlfilepath)
                subprocess.run(["ansible-vault", "encrypt", ymlfilepath, "--vault-password-file=tmp/ansible-vault-file"])


if fixeddev:
  echo("Fixed dev server autoconfigured")
if fixedtest:
  echo("Fixed test server autoconfigured")
#if fixedpreprod:
#  echo("Fixed dev preprod server configured")


print("")
print("---------------------------------------------------------------------------------------------------")
print("--------------====You can now deploy the servers using one of the below commands====---------------")
print("---------------------------------------------------------------------------------------------------")

print("---===---====---===---===---===---===---Testing only (2dtest.nz realm)---===---===---===---===---===---===---")
print("ansible-playbook playbooks/newservers-2dtest.nz.yml --vault-password-file tmp/ansible-vault-file")
print("")
print("")
print("---===---====---===---===---===---===---===--Production (2dl.nz realm)--===---===---===---===---===---===---===---")
print("ansible-playbook playbooks/newservers-2dl.nz.yml --vault-password-file tmp/ansible-vault-file")
print("")
print("")
