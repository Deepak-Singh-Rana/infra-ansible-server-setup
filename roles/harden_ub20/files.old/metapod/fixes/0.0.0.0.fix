#!/bin/bash
TOREPLACE=()

#manual variables
TABSPACING="\t"

LOGFILE=/var/log/metapod/metapod.log

WHAT=""
WHERE="/etc/fstab"
COMMENTSTYLE="#"
POSTMATCH=""
#TOREPLACE+=("")

#automatically set variables
LOCKFOLDER="/etc/metapod/lock"
SCRIPTNAME=`basename $BASH_SOURCE | sed 's/.fix//'`
COUNT=0
CONTINUE=""
MATCH=""
COMMENTED=""
INFO=""

GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
RESET=`tput sgr0`

if [ "$1" == "--help" ] || [ "$1" == "-h" ]
then
        echo "Arguments Avalible"
        echo "-h --help       Show this help"
        echo "-d --debug      Show debugging information for Passes and Fails"
        exit 0;
fi
if [ "$1" == "--debug" ] || [ "$1" == "-d" ]; then
        SHOWDEBUG=true
fi

if [ $SHOWDEBUG ]; then
        echo "-----------------"
        echo -e "$SCRIPTNAME:"
fi
echo -e "\n$SCRIPTNAME" >> $LOGFILE
date -u >> $LOGFILE
if [ -f "$LOCKFOLDER/$SCRIPTNAME.lock" ]
then
        echo "$LOCKFOLDER/$SCRIPTNAME.lock"
        echo "lock file exists, therefore not running" >> $LOGFILE
else
##################
#Start Pre Checks#
##################
#check to see if the file  doens't exist
TEST1=`cat $WHERE | grep /home | grep rw | grep nodev | grep relatime | grep data=ordered`
if [[ "$TEST1" == "" ]]
then
	if [ $SHOWDEBUG ]; then
		echo "sed -i 's| /home\(.*\)defaults| /home\1rw,nodev,relatime,data=ordered|' $WHERE"
	fi
	sed -i 's| /home\(.*\)defaults| /home\1rw,nodev,relatime,data=ordered|' $WHERE
	echo "sed -i 's| /home\(.*\)defaults| /home\1rw,nodev,relatime,data=ordered|' $WHERE" >> $LOGFILE
else
	if [ $SHOWDEBUG ]; then
		echo " /home partition permissions already set, not doing anything"
	fi
	INFO="true"
	echo " /home partition permissions already set, not doing anything" >> $LOGFILE
fi
TEST2=`cat $WHERE | grep /tmp | grep rw | grep nosuid | grep nodev | grep noexec | grep auto | grep nouser | grep async`
if [[ "$TEST2" == "" ]]
then
	if [ $SHOWDEBUG ]; then
		echo "sed -i 's| /tmp\(.*\)defaults| /tmp\1rw,nosuid,nodev,noexec,auto,nouser,async|' $WHERE"
	fi
	sed -i 's| /tmp\(.*\)defaults| /tmp\1rw,nosuid,nodev,noexec,auto,nouser,async|' $WHERE
	echo "sed -i 's| /tmp\(.*\)defaults| /tmp\1rw,nosuid,nodev,noexec,auto,nouser,async|' $WHERE" >> $LOGFILE
else
	if [ $SHOWDEBUG ]; then
		echo " /tmp partition permissions already set, not doing anything"
	fi
	echo " /tmp partition permissions already set, not doing anything" >> $LOGFILE
	INFO="true"
fi
TEST3=`cat $WHERE | grep /var/tmp | grep rw | grep nosuid | grep nodev | grep noexec | grep auto | grep nouser | grep async`
if [[ "$TEST3" == "" ]]
then
	if [ $SHOWDEBUG ]; then
		echo "sed -i 's| /var/tmp\(.*\)defaults| /var/tmp\1rw,nosuid,nodev,noexec,auto,nouser,async|' $WHERE"
	fi
	sed -i 's| /var/tmp\(.*\)defaults| /var/tmp\1rw,nosuid,nodev,noexec,auto,nouser,async|' $WHERE
	echo "sed -i 's| /var/tmp\(.*\)defaults| /var/tmp\1rw,nosuid,nodev,noexec,auto,nouser,async|' $WHERE" >> $LOGFILE
else
	if [ $SHOWDEBUG ]; then
		echo " /var/tmp partition permissions already set, not doing anything"
	fi
	echo " /var/tmp partition permissions already set, not doing anything" >> $LOGFILE
	INFO="true"
fi
TEST4=`cat $WHERE | grep "tmpfs /dev/shm tmpfs" | grep rw | grep nosuid | grep nodev | grep noexec | grep relatime`
if [[ "$TEST4" == "" ]]
then
	if [ $SHOWDEBUG ]; then
		echo "echo \"tmpfs /dev/shm tmpfs rw,nosuid,nodev,noexec,relatime 0 0\" >> $WHERE"
	fi
	echo "tmpfs /dev/shm tmpfs rw,nosuid,nodev,noexec,relatime 0 0" >> $WHERE
	echo "echo \"tmpfs /dev/shm tmpfs rw,nosuid,nodev,noexec,relatime 0 0\" >> $WHERE" >> $LOGFILE
else
	if [ $SHOWDEBUG ]; then
		echo " /dev/shm partition permissions already set, not doing anything"
	fi
	INFO="true"
	echo " /dev/shm partition permissions already set, not doing anything" >> $LOGFILE
fi

if [[ "$PASS" == "true" ]] && [[ "$INFO" != "true" ]]
then
        echo -e "$SCRIPTNAME: $TABSPACING ${GREEN}[PASS]${RESET}"
fi
if [[ "$INFO" == "true" ]]
then
        echo -e "$SCRIPTNAME: $TABSPACING ${YELLOW}[INFO]${RESET}"
fi

PASS=""
INFO=""
CONTINUE=""
EXISTS=""
MATCH=""
COMMENTED=""

#create a lock file to make sure packages updates can't replace unhardend things
touch "$LOCKFOLDER/$SCRIPTNAME.lock"
fi
